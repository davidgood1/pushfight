package require tcltest
namespace import ::tcltest::*

source ../pushfight.tcl

set DefaultPieces [list C3 C4 A4 B4 D4 A5 D5 B6 B5 C5 -]

test NextRow_returns_correctLoc_when_nextRowIsOnBoardIncrement {
} -body {
    pushfight::NextRow C3 1
} -result {D3}

test NextRow_returns_defaultsToIncrement_when_noDirectionGiven {
} -body {
    pushfight::NextRow C3
} -result {D3}

test NextRow_returns_empty_when_nextRowDoesNotExistIncrement {
} -body {
    pushfight::NextRow D3 1
} -result {}

test NextRow_returns_correctLoc_when_nextRowIsOnBoardDecrement {
} -body {
    pushfight::NextRow C3 -1
} -result {B3}

test NextRow_returns_empty_when_nextRowDoesNotExistDecrement {
} -body {
    pushfight::NextRow A3 -1
} -result {}

test NextCol_returns_correctLoc_when_nextColIsOnBoardIncrement {
} -body {
    pushfight::NextCol C3 1
} -result {C4}

test NextCol_returns_defaultsToIncrement_when_noDirectionGiven {
} -body {
    pushfight::NextCol C3
} -result {C4}

test NextCol_returns_empty_when_nextColDoesNotExistIncrement {
} -body {
    pushfight::NextCol C9 1
} -result {}

test NextCol_returns_correctLoc_when_nextColIsOnBoardDecrement {
} -body {
    pushfight::NextCol C3 -1
} -result {C2}

test NextCol_returns_empty_when_nextColDoesNotExistDecrement {
} -body {
    pushfight::NextCol C0 -1
} -result {}

test AddLoc_returns_correctList_when_startListIsEmpty {
} -body {
    pushfight::AddLoc {} A1
} -result {A1}

test AddLoc_returns_correctList_when_startListIsNotEmpty {
} -body {
    pushfight::AddLoc [list B1 C1 D1] A1
} -result {B1 C1 D1 A1}

test AddLoc_returns_correctList_when_multipleUniqueLocs {
} -body {
    pushfight::AddLoc [list B1 C1 D1] B2 C2 D2
} -result {B1 C1 D1 B2 C2 D2}

test AddLoc_doesNotAddLoc_when_alreadyInList {
} -body {
    pushfight::AddLoc [list B1 C1 D1] B1
} -result {B1 C1 D1}

test AddLoc_doesNotAddLoc_when_emptyLoc {
} -body {
    pushfight::AddLoc [list B1 C1 D1] A1 {} B2
} -result {B1 C1 D1 A1 B2}

test LocDir_returns_correctLocation_when_adjacentLocationEast {
} -body {
    pushfight::LocDir B3 B4
} -result {E}

test LocDir_returns_correctLocation_when_adjacentLocationWest {
} -body {
    pushfight::LocDir B3 B2
} -result {W}

test LocDir_returns_correctLocation_when_adjacentLocationNorth {
} -body {
    pushfight::LocDir B3 A3
} -result {N}

test LocDir_returns_correctLocation_when_adjacentLocationSouth {
} -body {
    pushfight::LocDir B3 C3
} -result {S}

test LocDir_returns_empty_when_sameColNonAdjacentRows {
} -body {
    pushfight::LocDir D3 B3
} -result {}

test LocDir_returns_empty_when_sameRowNonAdjacentCols {
} -body {
    pushfight::LocDir B5 B3
} -result {}

test LocDir_returns_empty_when_nonAdjacentRowsAndCols {
} -body {
    pushfight::LocDir D3 B5
} -result {}

cleanupTests
